name: CI

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - "main"
  push:

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    name: Linux (${{ matrix.build_type }})
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: read
      packages: read
    container:
      image: ghcr.io/${{ github.repository }}-ubuntu-ci:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [debug, release, coverage]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Cache xmake packages (xrepo)
        uses: actions/cache@v4
        with:
          path: |
            ~/.xmake
          key: xmake-${{ runner.os }}-${{ hashFiles('**/xmake.lua', '**/xmake-requires.lock') }}
          restore-keys: |
            xmake-${{ runner.os }}-

      - name: Configure
        run: xmake f -m ${{ matrix.build_type }} --junit_report=y -y

      - name: Run unit tests
        run: xmake test -g tests/unit

      - name: Run compile tests
        run: xmake test -g tests/compile

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: build/**.junit.xml
          flags: unit-tests-linux-${{ matrix.build_type }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage report
        if: matrix.build_type == 'coverage'
        run: |
          gcovr \
            --root "$GITHUB_WORKSPACE" \
            --filter "$GITHUB_WORKSPACE/include" \
            --gcov-executable "llvm-cov gcov" \
            --object-directory "build/.objs" \
            --xml --xml-pretty \
            -o "build/coverage.xml"

      - name: Upload coverage to Codecov
        if: matrix.build_type == 'coverage'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          disable_search: true
          plugins: noop
          file: build/coverage.xml

      - name: Upload coverage to Codacy
        if: matrix.build_type == 'coverage'
        uses: codacy/codacy-coverage-reporter-action@v1.3.0
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: build/coverage.xml
          language: cpp

  windows:
    name: Windows (${{ matrix.build_type }})
    runs-on: windows-latest
    permissions:
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        build_type: [debug, release]
    steps:
      - name: Get current week as package key (pwsh)
        id: cache_key
        shell: pwsh
        run: |
          $calendar = [System.Globalization.CultureInfo]::InvariantCulture.Calendar
          $week = $calendar.GetWeekOfYear((Get-Date), [System.Globalization.CalendarWeekRule]::FirstFourDayWeek, [System.DayOfWeek]::Monday)
          "key=$week" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
        
      - name: Checkout
        uses: actions/checkout@v4

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update

      # Fetch xmake dephash
      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "hash=$(xmake l utils.ci.packageskey)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      # Cache xmake dependencies
      - name: Restore cached xmake dependencies
        id: restore-depcache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: MSVC-${{ matrix.build_type }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

      - name: Configure
        run: xmake f -m ${{ matrix.build_type }} -y

      # Save dependencies
      - name: Save cached xmake dependencies
        if: ${{ !steps.restore-depcache.outputs.cache-hit }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

      - name: Run unit tests
        run: xmake test -g tests/unit

      - name: Run compile tests
        run: xmake test -g tests/compile
