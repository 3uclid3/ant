name: CI Linux

on:
  pull_request:
  push:
    paths-ignore:
      - ".github/workflows/build-images.yml"
      - ".github/workflows/coverage.yml"
      - ".github/workflows/ci-windows.yml"
      - ".gitignore"
      - "AGENTS.md"
      - "Dockerfile"
      - "LICENSE"
      - "README.md"

concurrency:
  group: ci-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-24.04
    permissions:
      actions: write
      contents: read
      packages: read
    container:
      image: ghcr.io/${{ github.repository }}-ubuntu-ci:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        build_type: [debug, release]

    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    steps:
      - name: Get current date as package key
        id: cache_key
        shell: bash
        run: echo "key=$(date +'%V')" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v4

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
        shell: bash

      # Install xmake
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1
        with:
          actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update

      # Fetch xmake dependency_hash
      - name: Retrieve dependencies hash
        id: dependency_hash
        run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
        shell: bash

      # Cache xmake dependencies
      - name: Restore cached xmake dependencies
        id: restore-depcache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: linux-${{ matrix.build_type }}-${{ steps.dependency_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}
          restore-keys: |
            linux-${{ matrix.build_type }}-${{ steps.dependency_hash.outputs.hash }}-

      # Configure build
      - name: Configure
        run: xmake f -m ${{ matrix.build_type }} --junit_report=y -y

      # Save dependencies
      - name: Save cached xmake dependencies
        if: ${{ !steps.restore-depcache.outputs.cache-hit }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

      - name: Run unit tests
        run: xmake test -g tests/unit

      - name: Run compile tests
        run: xmake test -g tests/compile

      - name: Upload test results to Codecov
        if: always()
        uses: codecov/test-results-action@v1
        with:
          files: build/**.junit.xml
          flags: unit-tests-linux-${{ matrix.build_type }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}
